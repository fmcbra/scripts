#!/usr/bin/make -f

## {{{ -------- [ Globals ] ------------------------------------------------------------------------

ifeq ($(origin V), command line)
  ifeq ($(V), 1)
    VERBOSE = 1
  endif
endif

SHELL = /bin/bash
APT = bootstrap-helper apt-get

BASH_ENV = /com/scripts/share/bootstrap.bashrc
export BASH_ENV

BOOTSTRAP_ENV = /var/lib/bootstrap.env
-include $(BOOTSTRAP_ENV)

ifeq ($(origin LOCAL_HOST), undefined)
  $(error required environment variable LOCAL_HOST unset)
endif
ifeq ($(origin LOCAL_DOMAIN), undefined)
  $(error required environment variable LOCAL_DOMAIN unset)
endif
ifeq ($(origin INET_FQDN), undefined)
  $(error required environment variable INET_FQDN unset)
endif

IS_VM       = $(shell bootstrap-helper is-vm;          rc=$$?; [[ $$rc -eq 0 ]] && v=1 || v=0; echo -n $$v)
IS_XEN      = $(shell bootstrap-helper vm-is-xen;      rc=$$?; [[ $$rc -eq 0 ]] && v=1 || v=0; echo -n $$v)
IS_KVM      = $(shell bootstrap-helper vm-is-kvm;      rc=$$?; [[ $$rc -eq 0 ]] && v=1 || v=0; echo -n $$v)
IS_HYPERV   = $(shell bootstrap-helper vm-is-hyperv;   rc=$$?; [[ $$rc -eq 0 ]] && v=1 || v=0; echo -n $$v)

CLOUD_AWS   = $(shell bootstrap-helper cloud-is-aws;   rc=$$?; [[ $$rc -eq 0 ]] && v=1 || v=0; echo -n $$v)
CLOUD_GCP   = $(shell bootstrap-helper cloud-is-gcp;   rc=$$?; [[ $$rc -eq 0 ]] && v=1 || v=0; echo -n $$v)
CLOUD_AZURE = $(shell bootstrap-helper cloud-is-azure; rc=$$?; [[ $$rc -eq 0 ]] && v=1 || v=0; echo -n $$v)

IS_CLOUD    = $(shell bootstrap-helper is-cloud;       rc=$$?; [[ $$rc -eq 0 ]] && v=1 || v=0; echo -n $$v)

## {{{ ifndef ROOT_DEV
ifndef ROOT_DEV
  ifeq ($(CLOUD_AWS), 1)
    ROOT_DEV = /dev/xvda
  else
    ROOT_DEV = /dev/sda
  endif
endif
## }}}

ROOT_MNT = /mnt/root
POOL_MNT = /mnt/pool

SSHD_CONF = /etc/ssh/sshd_config

SSH_PUBKEYS_URL = https://destinatech-production.appspot.com/pki/ssh/public
DOTFILES_GIT_URL = https://github.com/fmcbra/dotfiles
KSM_PRELOAD_URL = https://s3.eu-west-2.amazonaws.com/dtadm-public/ksm_preload.tar.xz

KEYCHAIN_VERSION = 2.8.5
KEYCHAIN_URL = https://github.com/funtoo/keychain/archive/$(KEYCHAIN_VERSION).tar.gz

APT_MIRROR = $(shell grep '^deb .*' /etc/apt/sources.list |head -n1 |awk '{print $$2}')

CHROOT_CMD = bootstrap-helper chroot-cmd

## {{{ $(PKG_PURGE)
PKG_PURGE =          \
  chrony             \
  dmidecode          \
  gdisk              \
  ntp                \
  python             \
  python2.7          \
  python2.7-minimal  \
  python3.5          \
  python3.5-minimal  \
  unattended-upgrades
## }}}

## {{{ $(PKG_DEPS)
PKG_DEPS =      \
  btrfs-progs   \
  cdebootstrap  \
  debootstrap   \
  curl          \
  git           \
  less          \
  lvm2          \
  make          \
  ncdu          \
  parted        \
  psmisc
## }}}

## {{{ $(PKG_CORE)
PKG_CORE =               \
  console-setup          \
  keyboard-configuration \
  locales                \
  make
## }}}

## {{{ $(PKG_EXTRA)
PKG_EXTRA =         \
  acl               \
  apt-file          \
  auditd            \
  bash-completion   \
  bind9-host        \
  cachefilesd       \
  command-not-found \
  diffutils         \
  grub-pc           \
  linux-image-amd64 \
  logwatch          \
  multitail         \
  mutt              \
  ncurses-term      \
  net-tools         \
  nfs-common        \
  openssh-server    \
  patch             \
  postfix           \
  procmail          \
  rpcbind           \
  screen            \
  sudo              \
  tasksel           \
  tig xfsprogs      \
  vim               \
  vim-scripts       \
  xz-utils
## }}}

ifeq ($(CLOUD_AZURE), 1)
  PKG_DEPS += waagent
endif

ALL_TARGETS =            \
  all-pre                \
  $(BOOTSTRAP_ENV)       \
  configure-sshd         \
  configure-debconf      \
  install-deps           \
  install-root-home      \
  install-root-gitconfig \
  install-com            \
  purge-packages

## }}} -------- [ Globals ] ------------------------------------------------------------------------

.PHONY: all
all: $(ALL_TARGETS)

ifeq ($(origin LOCAL_HOST), undefined)
  $(error required environment variable LOCAL_HOST unset)
endif

## {{{ target: all-pre
ifdef VERBOSE
.PHONY: all-pre
all-pre:
	@echo 'IS_VM        = $(IS_VM)'
	@echo 'IS_XEN       = $(IS_XEN)'
	@echo 'IS_KVM       = $(IS_KVM)'
	@echo 'IS_HYPERV    = $(IS_HYPERV)'
	@echo 'IS_CLOUD     = $(IS_CLOUD)'
	@echo 'CLOUD_AWS    = $(CLOUD_AWS)'
	@echo 'CLOUD_AZURE  = $(CLOUD_AZURE)'
	@echo 'CLOUD_GCP    = $(CLOUD_GCP)'
	@echo 'LOCAL_HOST   = $(LOCAL_HOST)'
	@echo 'LOCAL_DOMAIN = $(LOCAL_DOMAIN)'
	@echo 'INET_FQDN    = $(INET_FQDN)'
	@echo 'ROOT_DEV     = $(ROOT_DEV)'
	@echo 'ROOT_MNT     = $(ROOT_MNT)'
	@echo 'POOL_MNT     = $(POOL_MNT)'
else
.PHONY: all-pre
all-pre:
endif
## }}}

## {{{ target: $(BOOTSTRAP_ENV)
$(BOOTSTRAP_ENV): all-pre
	@benv=$(BOOTSTRAP_ENV);            \
	if ! [[ -f $$benv ]];              \
	then                               \
	  truncate -s0 $$benv;             \
	  for line in                      \
	    'IS_VM=$(IS_VM)'               \
	    'IS_XEN=$(IS_XEN)'             \
	    'IS_KVM=$(IS_KVM)'             \
	    'IS_HYPERV=$(IS_HYPERV)'       \
	    'CLOUD_AWS=$(CLOUD_AWS)'       \
	    'CLOUD_AZURE=$(CLOUD_AZURE)'   \
	    'CLOUD_GCP=$(CLOUD_GCP)'       \
	    'LOCAL_HOST=$(LOCAL_HOST)'     \
	    'LOCAL_DOMAIN=$(LOCAL_DOMAIN)' \
	    'INET_FQDN=$(INET_FQDN)'       \
	    'ROOT_DEV=$(ROOT_DEV)'         \
	    'ROOT_MNT=$(ROOT_MNT)'         \
	    'POOL_MNT=$(POOL_MNT)';        \
	  do                               \
	    echo "$$line" >> $$benv;       \
	  done;                            \
	fi
## }}}

## {{{ target: apt-update
.PHONY: apt-update
apt-update:
	$(APT) update
## }}}

## {{{ target: purge-packages
.PHONY: purge-packages
purge-packages: apt-update
	$(APT) purge $(PKG_PURGE)
	$(APT) autoremove --purge -y
## }}}

## {{{ target: install-updates
.PHONY: install-updates
install-updates: apt-update
	$(APT) dist-upgrade --fix-{broken,missing}
## }}}

## {{{ target: install-deps
.PHONY: install-deps
install-deps:
	$(APT) install $(PKG_DEPS)
## }}}

## {{{ target: install-root-home
.PHONY: install-root-home
install-root-home:
	rm -rf /root
	mkdir -m0700 -p /root/.ssh
	curl $(SSH_PUBKEYS_URL) > /root/.ssh/authorized_keys
	chmod 0600 /root/.ssh/authorized_keys
	git clone $(DOTFILES_GIT_URL) /root/.dotfiles
	make -C /root/.dotfiles
## }}}

## {{{ target: install-root-gitconfig
.PHONY: install-root-gitconfig
install-root-gitconfig:
	git config --global user.name root
	git config --global user.email root@$(LOCAL_HOST).$(LOCAL_DOMAIN)
## }}}

## {{{ target: partition-disk
.PHONY: partition-disk
partition-disk:
	-umount -a
	autopart $(ROOT_DEV)
## }}}

## {{{ target: fs-create
.PHONY: fs-create
fs-create: fs-format
	mkdir -p $(ROOT_MNT) $(POOL_MNT)
	mount LABEL=pool $(POOL_MNT)
	for v in root data home snap; do btrfs subvolume create $(POOL_MNT)/$$v; done
	umount $(POOL_MNT)
## }}}

## {{{ target: fs-format
.PHONY: fs-format
fs-format: format-boot format-swap format-fscache format-pool
## }}}

## {{{ target: fs-mount
.PHONY: fs-mount
fs-mount:
	mount -o subvol=root LABEL=pool $(ROOT_MNT)
	mkdir -p $(ROOT_MNT)/boot
	mount LABEL=boot $(ROOT_MNT)/boot
	for v in data home snap; do mkdir -p $(ROOT_MNT)/$$v && mount -o subvol=$$v LABEL=pool $(ROOT_MNT)/$$v; done
	chmod 0750 $(ROOT_MNT)/snap
## }}}

## {{{ target: format-boot
.PHONY: format-boot
format-boot:
	mkfs -t ext4 -F -L boot $(ROOT_DEV)1
## }}}

## {{{ target: format-swap
.PHONY: format-swap
format-swap:
	-swapoff $(ROOT_DEV)2
	mkswap -f -L swap $(ROOT_DEV)2
	swapon $(ROOT_DEV)2
## }}}

## {{{ target: format-fscache
.PHONY: format-fscache
format-fscache:
	mkfs -t ext4 -F -L fscache $(ROOT_DEV)3
## }}}

## {{{ target: format-pool
.PHONY: format-pool
format-pool:
	mkfs -t btrfs -f -L pool $(ROOT_DEV)4
## }}}

## {{{ target: chroot-install
.PHONY: chroot-install
chroot-install: partition-disk fs-create fs-format fs-mount chroot-debootstrap chroot-install-bashrc
	cp -a /com $(ROOT_MNT)/
	cp /var/lib/bootstrap.env $(ROOT_MNT)/var/lib/
	$(CHROOT_CMD) 'apt-get install make'
	$(CHROOT_CMD) 'bootstrap chroot-install-packages'
## }}}

## {{{ target: chroot-debootstrap
.PHONY: chroot-debootstrap
chroot-debootstrap:
	debootstrap --arch amd64 buster $(ROOT_MNT) $(APT_MIRROR)
## }}}

## {{{ target: chroot-install-bashrc
.PHONY: chroot-install-bashrc
chroot-install-bashrc:
	cp $(ROOT_MNT)/etc/bash.bashrc{,.system}
	cp $(ROOT_MNT)/etc/bash.bashrc{,.chroot}
	echo -e "\nsource /var/lib/bootstrap.env" >> $(ROOT_MNT)/etc/bash.bashrc.chroot
	echo -e '\nhostname $$INET_FQDN' >> $(ROOT_MNT)/etc/bash.bashrc.chroot
	mv -f $(ROOT_MNT)/etc/bash.bashrc{.chroot,}
## }}}

## {{{ target: chroot-install-packages
.PHONY: chroot-install-packages
chroot-install-packages:
	$(APT) update
	$(APT) install $(PKG_CORE)
	$(APT) install $(PKG_DEPS)
	$(APT) install $(PKG_EXTRA)
## }}}

## {{{ target: chroot-mount
.PHONY: chroot-mount
chroot-mount:
	mount --bind /dev $(ROOT_MNT)/dev
	mount -t proc none $(ROOT_MNT)/proc
	mount -t sysfs none $(ROOT_MNT)/sys
	mkdir $(ROOT_MNT)/oldroot
	mount --bind / $(ROOT_MNT)/oldroot
## }}}

## {{{ target: install-ksm-preload
.PHONY: install-ksm-preload
install-ksm-preload:
	curl $(KSM_PRELOAD_URL) |tar Jxvpf -C /
## }}}

## {{{ target: download-keychain
.PHONY: download-keychain
download-keychain:
	mkdir -m0700 /var/tmp/bootstrap -p
	curl -L -s -S $(KEYCHAIN_URL) > /var/tmp/bootstrap/keychain-$(KEYCHAIN_VERSION).tar.gz
## }}}

## {{{ target: install-keychain
.PHONY: install-keychain
install-keychain: download-keychain
	tar zxf /var/tmp/bootstrap/keychain-$(KEYCHAIN_VERSION).tar.gz -C /var/tmp/bootstrap
	install -d -m0755 /usr/share/local/bin
	install -m0755 /var/tmp/bootstrap/keychain-$(KEYCHAIN_VERSION)/keychain /usr/local/bin
	install -d -m0755 /usr/share/local/man/man1
	install -m0644 /var/tmp/bootstrap/keychain-$(KEYCHAIN_VERSION)/keychain.1 /usr/local/man/man1
	rm -rf /var/tmp/bootstrap/keychain-$(KEYCHAIN_VERSION)*
## }}}

## {{{ target: configure-sshd
.PHONY: configure-sshd
configure-sshd:
	sed -i -e 's/^PermitRootLogin.*/PermitRootLogin prohibit-password/' $(SSHD_CONF)
	sshd -t && service ssh restart
## }}}

## {{{ target: configure-debconf
.PHONY: configure-debconf
configure-debconf:
	echo "set debconf/frontend Dialog" |debconf-communicate
	echo "set debconf/priority high" |debconf-communicate
## }}}

## {{{ target: configure-locales
.PHONY: configure-locales
configure-locales:
	locale-gen --purge en_GB.UTF-8
	echo -e 'LANG="en_GB.UTF-8"\nLANGUAGE="en_GB:en"\n' > /etc/default/locale
## }}}

## {{{ target: configure-tzdata
.PHONY: configure-tzdata
configure-tzdata:
	echo Etc/UTC > /etc/timezone
	dpkg-reconfigure -f noninteractive tzdata
## }}}

.PHONY: install-com
install-com: install-com-dotfiles

## {{{ target: install-com-dotfiles
.PHONY: install-com-dotfiles
install-com-dotfiles:
	git clone https://github.com/fmcbra/dotfiles /com/dotfiles
	cd /com/dotfiles && git submodule update --init --recursive
## }}}

.PHONY: upgrade-buster
upgrade-buster: upgrade-buster-pre upgrade-buster-post

## {{{ target: upgrade-buster-pre
.PHONY: upgrade-buster-pre
upgrade-buster-pre:
	sed -i -e s/stretch/buster/g /etc/apt/sources.list
	$(APT) update
	$(APT) dist-upgrade
	$(APT) clean
## }}}

## {{{ target: upgrade-buster-post
.PHONY: upgrade-buster-post
upgrade-buster-post: prune-kernels
	$(APT) clean
	reboot
## }}}

## {{{ target: prune-kernels
.PHONY: prune-kernels
prune-kernels:
	/com/scripts/bin/prune-kernels -yq
## }}}

## {{{ target: clear-apt-lists
.PHONY: clear-apt-lists
clear-apt-lists:
	rm -f /var/lib/apt/lists/*_{Contents,Index,InRelease,Packages,Sources,Translation}*
## }}}

##
# vim: ts=8 sw=8 noet fdm=marker :
##
